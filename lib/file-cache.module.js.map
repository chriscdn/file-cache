{"version":3,"file":"file-cache.module.js","sources":["../src/index.ts"],"sourcesContent":["import path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { pathExists } from \"path-exists\";\nimport sha1 from \"sha1\";\nimport Semaphore from \"@chriscdn/promise-semaphore\";\nimport touch from \"touch\";\nimport { findNuke } from \"@chriscdn/find-nuke\";\nimport { Duration } from \"@chriscdn/duration\";\nimport { rimraf } from \"rimraf\";\n\ntype DirectoryPath = string;\ntype FilePath = string;\ntype Milliseconds = number;\n\nexport type FileCacheOptions<T extends Record<string, any>> = {\n  cachePath: DirectoryPath;\n  cb: (filePath: FilePath, context: T) => Promise<void>;\n  ext: string;\n  cleanupInterval?: Milliseconds;\n  ttl: Milliseconds;\n  resolveFileName?: (args: T) => FilePath;\n};\n\nclass FileCache<T> {\n  private _cachePath: FileCacheOptions<T>[\"cachePath\"];\n  private _resolveFileName: FileCacheOptions<T>[\"resolveFileName\"];\n  private _cb: FileCacheOptions<T>[\"cb\"];\n  private _ext: FileCacheOptions<T>[\"ext\"];\n  private _ttl: FileCacheOptions<T>[\"ttl\"];\n  private _cleanupInterval: FileCacheOptions<T>[\"cleanupInterval\"];\n\n  private _intervalId: ReturnType<typeof setInterval> | null = null;\n\n  private _semaphore: Semaphore = new Semaphore();\n  private _cleanupSemaphore: Semaphore = new Semaphore();\n\n  constructor(\n    { cachePath, resolveFileName, cb, ext, ttl, cleanupInterval }:\n      FileCacheOptions<T>,\n  ) {\n    this._cachePath = cachePath;\n    this._resolveFileName = resolveFileName;\n    this._cb = cb;\n    this._ext = ext;\n    this._ttl = ttl;\n    this._cleanupInterval = cleanupInterval ??\n      Duration.toMilliseconds({ days: 1 });\n\n    (async () => {\n      if (!(await pathExists(this._cachePath))) {\n        throw new Error(\"ðŸ’¥ FileCache error: cachePath does not exist.\");\n        // process.exit(1); // or throw new Error() if you want to let it bubble\n      }\n    })();\n\n    // fire and forget\n    this.cleanup();\n\n    this._intervalId = setInterval(\n      this.cleanup.bind(this),\n      this._cleanupInterval,\n    );\n  }\n\n  /**\n   * Runs a cleanup pass to remove files older than 1 day from the cache.\n   * This is called periodically, but can be triggered manually.\n   */\n  async cleanup() {\n    try {\n      await this._cleanupSemaphore.acquire();\n      await findNuke(this._cachePath, {\n        olderThan: this._ttl,\n        verbose: true,\n        deleteEmptyDirectories: true,\n      });\n    } finally {\n      this._cleanupSemaphore.release();\n    }\n  }\n\n  /**\n   * Retrieves a cached file for the given arguments.\n   * If the file doesn't exist, it is generated by the callback and stored.\n   *\n   * Concurrency-safe, ensuring no conflicts when multiple requests are made\n   * for the same file.\n   *\n   * @param args The arguments used to determine the file's identity and generation\n   * @returns The path to the cached or newly created file\n   */\n  async getFile(args: T): Promise<FilePath> {\n    const filePath = this.resolveFilePath(args);\n\n    try {\n      await Promise.all([\n        this._semaphore.acquire(filePath),\n        this._cleanupSemaphore.wait(),\n      ]);\n\n      if (await pathExists(filePath)) {\n        // fire and forget\n        touch(filePath);\n      } else {\n        await fs.mkdir(path.dirname(filePath), { recursive: true });\n        await this._cb(filePath, args);\n      }\n    } finally {\n      this._semaphore.release(filePath);\n    }\n\n    return filePath;\n  }\n\n  /**\n   * Deletes a file from the cache if it exists.\n   *\n   * @param args The arguments used to determine the file's identity\n   * @returns True if the file was deleted, false if it didn't exist\n   */\n  async expire(args: T): Promise<boolean> {\n    const filePath = this.resolveFilePath(args);\n\n    if (await pathExists(filePath)) {\n      await rimraf(filePath);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Stops the background cleanup process, but does not delete any cached files.\n   */\n  destroy() {\n    if (this._intervalId) {\n      clearInterval(this._intervalId);\n      this._intervalId = null;\n    }\n  }\n\n  /**\n   * Resolves the filename for the cache based on the provided arguments.\n   *\n   * Uses the provided `resolveFileName` function if available, or falls back to\n   * generating a hash from the arguments to create a unique file name.\n   */\n  private resolveFileName(args: T): string {\n    return this._resolveFileName\n      ? this._resolveFileName(args)\n      : `${sha1(JSON.stringify(args, Object.keys(args).sort()))}.${this._ext}`;\n  }\n\n  /**\n   * Resolves the full file path for the cached file based on the provided arguments.\n   *\n   * @param args The arguments used to resolve the file path\n   * @returns The full path to the cached file\n   */\n  private resolveFilePath(args: T): FilePath {\n    const fileName = this.resolveFileName(args);\n\n    const filePath = path.resolve(\n      this._cachePath,\n      fileName[0],\n      fileName[1],\n      fileName[2],\n      fileName[3],\n      fileName,\n    );\n\n    return filePath;\n  }\n}\n\nexport { FileCache };\n"],"names":["FileCache","_ref","_this","cachePath","resolveFileName","cb","ext","ttl","cleanupInterval","_cachePath","_resolveFileName","_cb","this","_ext","_ttl","_cleanupInterval","_intervalId","_semaphore","Semaphore","_cleanupSemaphore","Duration","toMilliseconds","days","Promise","resolve","pathExists","then","_pathExists","Error","e","reject","cleanup","setInterval","bind","_proto","prototype","_this2","_temp","_finallyRethrows","acquire","findNuke","olderThan","verbose","deleteEmptyDirectories","_wasThrown","_result","release","getFile","args","_this3","filePath","resolveFilePath","_temp3","all","wait","_pathExists2","_temp2","fs","mkdir","path","dirname","recursive","touch","_wasThrown2","_result2","expire","_this4","_pathExists3","rimraf","destroy","clearInterval","sha1","JSON","stringify","Object","keys","sort","fileName"],"mappings":"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"}